{
  "github": "Voir sur Github",
  "sections": {
    "about": "À propos",
    "features": "Fonctionnalités",
    "snip": "Extraits de code"
  },
  "stg": {
    "brief": "Composant React qui détecte si une 'Section' chevauche une 'Fenêtre'",
    "desc": "Ce composant suit la section qui chevauche la fenêtre lorsque l'utilisateur fait défiler les sections enfants. Il prend en charge le défilement horizontal et vertical et propose des options personnalisables pour les dimensions et le décalage de la fenêtre.",
    "snips": {
      "useScrollTracking": "Ici, nous utilisons le crochet 'useScrollPosition' pour suivre la position de défilement de la fenêtre via 'currPos'. Selon la propriété 'orientation' du composant, nous définissons les valeurs 'axis' et 'axisEnd' en conséquence pour gérer à la fois le défilement vertical et horizontal.\n\nEnsuite, nous parcourons les sections et exécutons 'doesOverlap' pour vérifier si la section chevauche la fenêtre. Si c'est le cas, nous la comparons à la 'topMost' actuelle, et si elle est plus haute, elle devient la 'topMost'.\n\nEnfin, nous appelons 'setScrolledTo' avec l'ID de la section et la référence de l'élément."
    },
    "highlights": {
      "section": "section",
      "sections": "sections",
      "window": "fenêtre"
    },
    "info": "Ceci est utilisé dans ce même portfolio pour mettre en évidence la section actuelle dans la barre supérieure !"
  },
  "dcr": {
    "brief": "Un générateur de personnages DnD hautement personnalisable",
    "desc": "Un générateur de personnages DnD hautement personnalisable utilisant React18, Stitches et Radix-UI primitives, capable de créer jusqu'à 100 personnages en moins d'une seconde. Les fonctionnalités comprennent la génération de noms avec une graine aléatoire, les origines, les statistiques ajustables basées sur la comparaison des parents, les paramètres de sexe et d'âge, et l'exportation CSV avec un ordre d'en-tête personnalisable.",
    "snips": {
      "CharacterContextProvider": "Cet extrait présente le CharacterContextProvider, qui est le cœur de la logique de génération de personnages. Il démontre des modèles React avancés, notamment l'utilisation complète des hooks (useState, useMemo, useReducer, hooks personnalisés), l'API Contexte pour la gestion de l'état, la mémoïsation pour l'optimisation des performances et les calculs d'état dérivés. Le fournisseur gère tous les aspects d'un personnage, des attributs de base comme le sexe et l'âge aux éléments plus complexes comme les statistiques et la génération de noms.",
      "CharacterGenPage": "Le composant CharacterGenPage illustre des techniques React sophistiquées pour gérer plusieurs générations de personnages. Il utilise useCallback pour mémoïser la fonction complexe createGenForms, qui génère dynamiquement des composants CharacterAccordionItem basés sur les paramètres actuels. Le hook useEffect assure des mises à jour efficaces lorsque le nombre de personnages ou d'autres paramètres clés changent. Ce composant montre comment gérer la génération dynamique de composants et la gestion de l'état de manière performante.",
      "CharacterGenSettings": "CharacterGenSettings démontre une gestion complexe de l'état dans une interface de paramètres. Il utilise plusieurs hooks useState pour gérer divers paramètres, useEffect pour synchroniser l'état local et global, et useMemo pour optimiser le rendu d'éléments d'interface utilisateur complexes comme les dialogues. Le composant montre également l'intégration de composants d'interface utilisateur personnalisés et de dialogues, offrant une expérience de configuration riche et interactive pour l'utilisateur."
    }
  }
}
