{
  "github": "Voir sur Github",
  "sections": {
    "about": "À propos",
    "features": "Fonctionnalités",
    "snip": "Extraits de code"
  },
  "stg": {
    "brief": "Composant React qui détecte si une 'Section' chevauche une 'Fenêtre'",
    "desc": "Ce composant suit la section qui chevauche la fenêtre lorsque l'utilisateur fait défiler les sections enfants. Il prend en charge le défilement horizontal et vertical et propose des options personnalisables pour les dimensions et le décalage de la fenêtre.",
    "snips": {
      "useScrollTracking": "Ici, nous utilisons le crochet 'useScrollPosition' pour suivre la position de défilement de la fenêtre via 'currPos'. Selon la propriété 'orientation' du composant, nous définissons les valeurs 'axis' et 'axisEnd' en conséquence pour gérer à la fois le défilement vertical et horizontal.\n\nEnsuite, nous parcourons les sections et exécutons 'doesOverlap' pour vérifier si la section chevauche la fenêtre. Si c'est le cas, nous la comparons à la 'topMost' actuelle, et si elle est plus haute, elle devient la 'topMost'.\n\nEnfin, nous appelons 'setScrolledTo' avec l'ID de la section et la référence de l'élément."
    },
    "highlights": {
      "section": "section",
      "sections": "sections",
      "window": "fenêtre"
    },
    "info": "Ceci est utilisé dans ce même portfolio pour mettre en évidence la section actuelle dans la barre supérieure !"
  },
  "dcr": {
    "brief": "Un générateur de personnages DnD hautement personnalisable",
    "desc": "Un générateur de personnages DnD hautement personnalisable utilisant React18, Stitches et Radix-UI primitives, capable de créer jusqu'à 100 personnages en moins d'une seconde. Les fonctionnalités comprennent la génération de noms avec une graine aléatoire, les origines, les statistiques ajustables basées sur la comparaison des parents, les paramètres de sexe et d'âge, et l'exportation CSV avec un ordre d'en-tête personnalisable.",
    "snips": {
      "CharacterContextProvider": "Cet extrait présente le CharacterContextProvider, qui est le cœur de la logique de génération de personnages. Il démontre des modèles React avancés, notamment l'utilisation complète des hooks (useState, useMemo, useReducer, hooks personnalisés), l'API Contexte pour la gestion de l'état, la mémoïsation pour l'optimisation des performances et les calculs d'état dérivés. Le fournisseur gère tous les aspects d'un personnage, des attributs de base comme le sexe et l'âge aux éléments plus complexes comme les statistiques et la génération de noms.",
      "CharacterGenPage": "Le composant CharacterGenPage illustre des techniques React sophistiquées pour gérer plusieurs générations de personnages. Il utilise useCallback pour mémoïser la fonction complexe createGenForms, qui génère dynamiquement des composants CharacterAccordionItem basés sur les paramètres actuels. Le hook useEffect assure des mises à jour efficaces lorsque le nombre de personnages ou d'autres paramètres clés changent. Ce composant montre comment gérer la génération dynamique de composants et la gestion de l'état de manière performante.",
      "CharacterGenSettings": "CharacterGenSettings démontre une gestion complexe de l'état dans une interface de paramètres. Il utilise plusieurs hooks useState pour gérer divers paramètres, useEffect pour synchroniser l'état local et global, et useMemo pour optimiser le rendu d'éléments d'interface utilisateur complexes comme les dialogues. Le composant montre également l'intégration de composants d'interface utilisateur personnalisés et de dialogues, offrant une expérience de configuration riche et interactive pour l'utilisateur."
    }
  },
  "silverlingua": {
    "brief": "Un framework modulaire et extensible pour travailler avec des Grands Modèles de Langage (LLMs)",
    "desc": "SilverLingua est un framework léger et typé qui facilite le travail avec les LLMs. Il fournit une architecture intuitive inspirée de la biologie (atomes, molécules, organismes) pour les LLMs et les fonctionnalités associées telles que la gestion de mémoire consciente des tokens, les templates de prompts et l'intégration d'outils. Il standardise l'interaction avec les LLMs, tout en permettant des modifications chirurgicales et des extensions sans perturber la fonctionnalité principale. Créé comme une alternative plus intuitive à LangChain, souvent complexe et difficile à étendre.",
    "snips": {
      "SummarizingIdearium": "La classe SummarizingIdearium étend élégamment la gestion de mémoire d'Idearium en implémentant une stratégie de résumé au lieu de simplement supprimer les anciens messages. Lorsque la limite de tokens est dépassée, elle identifie des groupes de messages non persistants, les résume pour préserver leur information essentielle et remplace les messages originaux par ces résumés.\n\nCette implémentation démontre l'extensibilité de SilverLingua - en redéfinissant simplement la méthode _trim, nous obtenons une stratégie de gestion de mémoire entièrement nouvelle qui préserve le contexte tout en réduisant l'utilisation des tokens. Cet exemple montre comment l'architecture de SilverLingua permet des personnalisations puissantes avec des changements de code minimaux.",
      "OpenAIChatAgent": "L'implémentation d'OpenAIChatAgent montre comment la fonctionnalité spécifique au fournisseur peut être intégrée proprement. Elle n'a besoin d'implémenter que la méthode _bind_tools, qui transforme les objets Tool de SilverLingua au format attendu par OpenAI pour l'appel de fonctions.\n\nCette implémentation minimale (seulement ~40 lignes de code) démontre la philosophie de conception rationalisée de SilverLingua - en gérant les complexités du comportement de l'agent dans la classe abstraite de base, les implémentations concrètes peuvent se concentrer uniquement sur les adaptations spécifiques au fournisseur.",
      "AnthropicChatAgent": "Similaire à l'implémentation d'OpenAI, AnthropicChatAgent montre la conception indépendante du fournisseur du framework. Il implémente la même interface mais s'adapte au format d'outil spécifique d'Anthropic dans la méthode _bind_tools.\n\nCette cohérence entre différents fournisseurs est ce qui rend SilverLingua si puissant - les développeurs peuvent facilement passer d'un fournisseur de LLM à un autre ou utiliser plusieurs fournisseurs dans la même application avec des changements de code minimaux. L'interface abstraite partagée garantit que le comportement reste cohérent quel que soit le fournisseur de LLM sous-jacent.",
      "ProviderAgnosticUsage": "L'une des fonctionnalités les plus puissantes de SilverLingua est la facilité avec laquelle vous pouvez passer d'un fournisseur de LLM à un autre. Le code exemple montre la création d'un agent avec le modèle Claude d'Anthropic et un autre avec le modèle GPT d'OpenAI, tous deux utilisant le même outil.\n\nMalgré les différences significatives dans la façon dont ces fournisseurs gèrent l'appel d'outils en coulisses, SilverLingua abstrait ces complexités. Cela permet aux développeurs de se concentrer sur la construction de la logique de leur application plutôt que de gérer des implémentations spécifiques au fournisseur."
    },
    "highlights": {
      "token-aware": "gestion de mémoire consciente des tokens",
      "biological architecture": "architecture d'atomes, molécules, organismes",
      "provider agnostic": "passage facile entre fournisseurs de LLM",
      "extensible": "conçu pour l'extension avec un code minimal",
      "type-safe": "entièrement typé avec Pydantic"
    },
    "info": "La conception de SilverLingua le rend particulièrement adapté aux applications LLM de production où la fiabilité, la maintenabilité et la flexibilité sont cruciales. Son architecture hiérarchique utilisant des modèles de conception atomique (atomes, molécules, organismes) fournit un modèle mental clair pour comprendre les relations et les responsabilités des composants, rendant la base de code plus maintenable à mesure qu'elle évolue."
  }
}
