{
  "github": "Ver en Github",
  "sections": {
    "about": "Acerca de",
    "features": "Funcionalidades",
    "snip": "Fragmentos de código"
  },
  "stg": {
    "brief": "Componente React que detecta si una 'Sección' se superpone con una 'Ventana'",
    "desc": "Este componente sigue la sección que se superpone con la ventana a medida que el usuario se desplaza por las secciones secundarias. Admite desplazamiento horizontal y vertical y ofrece opciones personalizables para las dimensiones de la ventana y el desplazamiento.",
    "snips": {
      "useScrollTracking": "Aquí usamos el gancho 'useScrollPosition' para rastrear la posición de desplazamiento de la ventana a través de 'currPos'. Dependiendo de la propiedad 'orientation' del componente, establecemos los valores 'axis' y 'axisEnd' en consecuencia para manejar tanto el desplazamiento vertical como horizontal.\n\nLuego, recorremos las secciones y ejecutamos 'doesOverlap' para verificar si la sección se superpone con la ventana. Si lo hace, lo comparamos con la 'topMost' actual, y si es más alto, se convierte en el 'topMost'.\n\nFinalmente, llamamos a 'setScrolledTo' con el ID de la sección y la referencia del elemento."
    },
    "highlights": {
      "section": "sección",
      "sections": "secciones",
      "window": "ventana"
    },
    "info": "¡Este componente se utiliza en este mismo portafolio para resaltar la sección actual en la barra superior!"
  },
  "dcr": {
    "brief": "Un generador de personajes DnD altamente personalizable",
    "desc": "Un generador de personajes DnD altamente personalizable que utiliza React18, Stitches y Radix-UI primitivos, capaz de crear hasta 100 personajes en menos de 1 segundo. Las características incluyen generación de nombres con semilla aleatoria, antecedentes, estadísticas ajustables basadas en la comparación de padres, configuración de sexo y edad, y exportación a CSV con orden de encabezado personalizable.",
    "snips": {
      "CharacterContextProvider": "Este fragmento muestra el CharacterContextProvider, que es el núcleo de la lógica de generación de personajes. Demuestra patrones avanzados de React, incluyendo el uso integral de hooks (useState, useMemo, useReducer, hooks personalizados), API de Contexto para la gestión del estado, memoización para la optimización del rendimiento y cálculos de estado derivados. El proveedor gestiona todos los aspectos de un personaje, desde atributos básicos como el sexo y la edad hasta elementos más complejos como las estadísticas y la generación de nombres.",
      "CharacterGenPage": "El componente CharacterGenPage ilustra técnicas sofisticadas de React para manejar múltiples generaciones de personajes. Utiliza useCallback para memoizar la compleja función createGenForms, que genera dinámicamente componentes CharacterAccordionItem basados en la configuración actual. El hook useEffect asegura actualizaciones eficientes cuando cambia el número de personajes u otros ajustes clave. Este componente demuestra cómo manejar la generación dinámica de componentes y la gestión de estado de manera eficiente.",
      "CharacterGenSettings": "CharacterGenSettings demuestra una gestión compleja del estado en una interfaz de configuración. Utiliza múltiples hooks useState para gestionar varias configuraciones, useEffect para sincronizar el estado local y global, y useMemo para optimizar el renderizado de elementos de UI complejos como diálogos. El componente también muestra la integración de componentes de UI personalizados y diálogos, proporcionando una experiencia de configuración rica e interactiva para el usuario."
    }
  },
  "silverlingua": {
    "brief": "Un framework modular y extensible para trabajar con Modelos de Lenguaje Grande (LLMs)",
    "desc": "SilverLingua es un framework ligero y con seguridad de tipos que facilita el trabajo con LLMs. Proporciona una arquitectura intuitiva inspirada en la biología (átomos, moléculas, organismos) para LLMs y funcionalidades asociadas como gestión de memoria consciente de tokens, plantillas de prompts y integración de herramientas. Estandariza la interacción con los LLMs, permitiendo modificaciones quirúrgicas y extensiones sin interrumpir la funcionalidad principal. Creado como una alternativa más intuitiva a LangChain, que suele ser complejo y difícil de extender.",
    "snips": {
      "SummarizingIdearium": "La clase SummarizingIdearium extiende elegantemente la gestión de memoria de Idearium implementando una estrategia de resumen en lugar de simplemente eliminar mensajes antiguos. Cuando se excede el límite de tokens, identifica grupos de mensajes no persistentes, los resume para preservar su información esencial y reemplaza los mensajes originales con estos resúmenes.\n\nEsta implementación demuestra la extensibilidad de SilverLingua - con solo sobrescribir el método _trim, obtenemos una estrategia de gestión de memoria completamente nueva que preserva el contexto mientras reduce el uso de tokens. Este ejemplo muestra cómo la arquitectura de SilverLingua permite personalizaciones potentes con cambios mínimos de código.",
      "OpenAIChatAgent": "La implementación de OpenAIChatAgent muestra lo limpiamente que se puede integrar la funcionalidad específica del proveedor. Solo necesita implementar el método _bind_tools, que transforma los objetos Tool de SilverLingua al formato esperado por OpenAI para la llamada de funciones.\n\nEsta implementación mínima (solo ~40 líneas de código) demuestra la filosofía de diseño simplificado de SilverLingua - al manejar las complejidades del comportamiento del agente en la clase base abstracta, las implementaciones concretas pueden centrarse únicamente en adaptaciones específicas del proveedor.",
      "AnthropicChatAgent": "Similar a la implementación de OpenAI, AnthropicChatAgent muestra el diseño independiente del proveedor del framework. Implementa la misma interfaz pero se adapta al formato específico de herramientas de Anthropic en el método _bind_tools.\n\nEsta consistencia entre diferentes proveedores es lo que hace que SilverLingua sea tan potente - los desarrolladores pueden cambiar fácilmente entre proveedores de LLM o usar múltiples proveedores en la misma aplicación con cambios mínimos de código. La interfaz abstracta compartida garantiza que el comportamiento se mantenga consistente independientemente del proveedor de LLM subyacente.",
      "ProviderAgnosticUsage": "Una de las características más potentes de SilverLingua es lo fácilmente que puedes cambiar entre diferentes proveedores de LLM. El código de ejemplo muestra la creación de un agente con el modelo Claude de Anthropic y otro con el modelo GPT de OpenAI, ambos utilizando la misma herramienta.\n\nA pesar de las diferencias significativas en cómo estos proveedores manejan la llamada de herramientas tras bambalinas, SilverLingua abstrae estas complejidades. Esto permite a los desarrolladores centrarse en construir la lógica de su aplicación en lugar de manejar implementaciones específicas del proveedor."
    },
    "highlights": {
      "token-aware": "gestión de memoria consciente de tokens",
      "biological architecture": "arquitectura de átomos, moléculas, organismos",
      "provider agnostic": "fácil cambio entre proveedores de LLM",
      "extensible": "diseñado para extensión con código mínimo",
      "type-safe": "completamente seguro en tipos con Pydantic"
    },
    "info": "El diseño de SilverLingua lo hace particularmente adecuado para aplicaciones LLM de producción donde la fiabilidad, mantenibilidad y flexibilidad son cruciales. Su arquitectura jerárquica utilizando patrones de diseño atómico (átomos, moléculas, organismos) proporciona un modelo mental claro para entender las relaciones y responsabilidades de los componentes, haciendo que la base de código sea más mantenible a medida que escala."
  }
}
